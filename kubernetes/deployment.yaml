apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-timescale-ingestor
  namespace: trading
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-timescale-ingestor
  template:
    metadata:
      labels:
        app: kafka-timescale-ingestor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: ingestor
        image: registry.local:5000/kafka-timescale-ingestor:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: metrics
        envFrom:
        - configMapRef:
            name: kafka-timescale-config
        env:
        - name: TIMESCALEDB_USER
          valueFrom:
            secretKeyRef:
              name: timescaledb-service-secrets
              key: username
        - name: TIMESCALEDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-service-secrets
              key: password
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 15
          periodSeconds: 15
        startupProbe:
          httpGet:
            path: /health
            port: metrics
          failureThreshold: 30
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      imagePullSecrets:
      - name: regcred
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate 